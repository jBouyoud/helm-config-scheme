name: release
on:
  pull_request:
  push:
    branches:
      - main

jobs:
  build:
    name: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Disabling credentials persistence in order to be able to commit as a random user (eg. for release)
          persist-credentials: false
          fetch-depth: 0
      - uses: actions/setup-node@v2.1.4
        with:
          node-version: 14
      - uses: actions/cache@v2.1.4
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: 'install dependencies'
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --pure-lockfile
        env:
          HUSKY_SKIP_INSTALL: true
      - name: 'validation'
        run: yarn ci
      - name: 'release'
        if: "contains(github.ref, 'main')"
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: yarn -s semantic-release
      - name: 'release indicator'
        id: release-indicator
        if: "!contains(github.ref, 'main')"
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          GITHUB_REF="${GITHUB_HEAD_REF}"
          yarn -s semantic-release --dry-run --no-ci -b "${GITHUB_HEAD_REF}" | tee semantic.log

          RELEASE_TYPE="$(sed -En 's/.*Analysis of [0-9]+ commits complete: ([^\s]+) release.*/\1/p' semantic.log)"
          RELEASE_NOTES="$(sed -En '1h;1!H;${;g;s/.*Release note for version [^\s]+\s*:(.*)/\1/p;}' semantic.log)"

          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"

          echo "::set-output name=type::${RELEASE_TYPE}"
          echo "::set-output name=notes::${RELEASE_NOTES}"
      - name: 'release indicator - comment pr'
        uses: actions/github-script@v3
        if: "!contains(github.ref, 'main')"
        env:
          RELEASE_TYPE: ${{steps.release-indicator.outputs.type}}
          RELEASE_NOTES: ${{steps.release-indicator.outputs.notes}}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}

          script: |
            const PR_COMMENT_TITLE = '## :rocket: Release indicator\n\n';
            const releaseType = process.env.RELEASE_TYPE;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue_number = context.issue.number;

            const comments = await github.issues.listComments({
              owner,
              repo,
              issue_number,
            });
            const releaseIndicatorComment = comments.data.find(comment =>
              comment.body.startsWith(PR_COMMENT_TITLE),
            );

            function getPRComment() {
              if (!releaseType) {
                return `Recommended bump for this PR : **\`NO\`** release

            There are no relevant changes, so no new version is released.`;
              }
              return `Recommended bump for this PR : **\`${releaseType.toUpperCase()}\`** release

            ${process.env.RELEASE_NOTES}`;
            }
            const body = PR_COMMENT_TITLE + getPRComment("${{steps.release-indicator.outputs.type}}");

            if (releaseIndicatorComment) {
              await github.issues.updateComment({
                owner,
                repo,
                body,
                comment_id: releaseIndicatorComment.id,
              });
            } else {
              await github.issues.createComment({ owner, repo, issue_number, body });
            }
